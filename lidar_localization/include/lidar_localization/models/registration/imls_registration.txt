//
// Created by melody on 2022/12/9.
//

#ifndef LIDAR_LOCALIZATION_IMLS_REGISTRATION_H
#define LIDAR_LOCALIZATION_IMLS_REGISTRATION_H
#include <iostream>
#include <vector>
#include <pcl/kdtree/kdtree_flann.h>
#include <pcl/filters/filter.h>
#include <jsoncpp/json/json.h>

#include <nabo/nabo.h>

#include <Eigen/Dense>
#include <Eigen/SVD>
#include <Eigen/Core>
#include <Eigen/Eigenvalues>
#include <Eigen/Geometry>
#include <unsupported/Eigen/Polynomials>


#include "lidar_localization/models/registration/registration_interface.hpp"

using namespace std;

namespace lidar_localization{
    class IMLSRegistration {
    public:
        IMLSRegistration(const Json::Value& config_node);
        IMLSRegistration(double _r, double _h, int _iter);
        ~IMLSRegistration();

        void setIterations(int _iter);

        void setSourcePointCloud(std::vector<Eigen::Vector3d>& _source_pcloud);

        void setSourcePointCloud(pcl::PointCloud<pcl::PointXYZ>& pcl_cloud);

        void setSourcePointCloudNormals(std::vector<Eigen::Vector3d>& _normals);

        void setTargetPointCloudNormals(std::vector<Eigen::Vector3d>& _normals);

        void setTargetPointCloud(std::vector<Eigen::Vector3d>& _target_pcloud);

        void setTargetPointCloud(pcl::PointCloud<pcl::PointXYZ>& pcl_cloud);

        void createKDTreeUsingLocalMap(void);

        //IMLS函数，主要功能为进行把xi投影到表面上．
        bool ImplicitMLSFunction(Eigen::Vector3d x,
                                 double& height);

        //把点云进行投影，投影到表面surface之中．
        void projSourcePtToSurface(std::vector<Eigen::Vector3d>& in_cloud,
                                   std::vector<Eigen::Vector3d>& out_cloud,
                                   std::vector<Eigen::Vector3d>& out_normal);

        //求解四阶多项式
        bool SolverFourthOrderPolynomial(Eigen::VectorXd& p_coffi,
                                         double& lambda);

        //在已知匹配点的情况下，进行运动估计．
        bool SolveMotionEstimationProblem(std::vector<Eigen::Vector3d>& source_cloud,
                                          std::vector<Eigen::Vector3d>& ref_cloud,
                                          std::vector<Eigen::Vector3d>& ref_normals,
                                          Eigen::Matrix4d& deltaTrans);

        Eigen::Vector3d ComputeNormal(std::vector<Eigen::Vector3d>& nearPoints);

        bool Match(Eigen::Matrix4d& finalPose,
                   Eigen::Matrix4d& covariance);

    private:
        void RemoveNANandINFData(std::vector<Eigen::Vector3d>& _input);

        //目标点云和当前点云，目标点云为参考点云．
        std::vector<Eigen::Vector3d> m_sourcePointCloud, m_targetPointCloud;

        //目标点云的法向量
        std::vector<Eigen::Vector3d> m_sourcePtCloudNormals, m_targetPtCloudNormals;

        //所有的激光帧数据，每一个激光帧数据对应的点云的下标．
        std::map<int, std::vector<int>> m_LaserFrames;

        //指针
        Nabo::NNSearchD* m_pTargetKDTree;
        Nabo::NNSearchD* m_pSourceKDTree;

        Eigen::MatrixXd m_sourceKDTreeDataBase;
        Eigen::MatrixXd m_targetKDTreeDataBase;

        //迭代次数．
        int m_Iterations;

        //点云的id．
        int m_PtID;

        //LocalMap和Tree之间的下标偏移，Tree永远是从0开始．
        int m_offsetBetweenLocalMapAndTree;

        //含义见论文．用来计算权重．
        //m_r ~ 3*m_h
        double m_h, m_r;

        //用来判断是否需要自己进行计算．
        bool m_isGetNormals;
    };
}


#endif //LIDAR_LOCALIZATION_IMLS_REGISTRATION_H
